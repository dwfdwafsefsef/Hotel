<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.spring.hotel.HotelMapper">
	<!-- namespace : dao 클래스의 sqlSession과 연결하기 위한 키로 사용 -->

	<!-- 호텔 상세검색 -->
	<select id="select_by_hotel_id" resultType="HotelVO">
		SELECT * FROM
		${hotel}
		WHERE ${hotelId} = #{hotelId}
	</select>

	<!-- 호텔 페이징 처리 -->
	<select id="paging" resultType="hotelVO">
		SELECT B.${hotelId},
		B.${hotelName}, B.${hotelContent},
		B.${hotelAddress}, B.${reviewCnt},
		B.${hotelImg}, B.${hotelReviewAvg}, B.${heartCnt}
		FROM (
		SELECT ROWNUM
		RN, A.* FROM (
		SELECT * FROM ${hotel}
		ORDER BY ${hotelId} DESC
		)A
		)B WHERE
		RN BETWEEN
		#{start} AND #{end}
	</select>

	<!-- 호텔 리뷰 많은 순 전체검색 -->
	<select id="select_all_review_desc" resultType="HotelVO">
		SELECT
		B.${hotelId},
		B.${hotelName}, B.${hotelContent},
		B.${hotelAddress},
		B.${reviewCnt},
		B.${hotelImg}, B.${hotelReviewAvg}, B.${heartCnt}
		FROM (
		SELECT ROWNUM
		RN, A.* FROM (
		SELECT * FROM ${hotel}
		ORDER BY ${reviewCnt}
		DESC
		)A
		)B
		WHERE RN BETWEEN #{start} AND #{end}
	</select>

	<!-- 호텔 평균 별점 순 전체검색 -->
	<select id="select_all_hotel_review_avg_desc"
		resultType="HotelVO">
		SELECT B.${hotelId},
		B.${hotelName}, B.${hotelContent},
		B.${hotelAddress}, B.${reviewCnt},
		B.${hotelImg}, B.${hotelReviewAvg},
		B.${heartCnt}
		FROM (
		SELECT ROWNUM RN, A.* FROM (
		SELECT * FROM ${hotel}
		ORDER BY
		${hotelReviewAvg} DESC
		)A
		)B WHERE RN BETWEEN #{start} AND
		#{end}
	</select>

	<!-- 호텔 가나다 순 전체검색 -->
	<select id="select_all_hotel_name_asc" resultType="HotelVO">
		SELECT
		B.${hotelId},
		B.${hotelName}, B.${hotelContent},
		B.${hotelAddress},
		B.${reviewCnt},
		B.${hotelImg}, B.${hotelReviewAvg}, B.${heartCnt}
		FROM (
		SELECT ROWNUM
		RN, A.* FROM (
		SELECT * FROM ${hotel}
		ORDER BY ${hotelName}
		ASC
		)A
		)B
		WHERE RN BETWEEN #{start} AND #{end}
	</select>

	<select id="select_by_hotel_name" resultType="HotelVO">
		SELECT
		B.${hotelId},
		B.${hotelName}, B.${hotelContent},
		B.${hotelAddress},
		B.${reviewCnt},
		B.${hotelImg}, B.${hotelReviewAvg}, B.${heartCnt}
		FROM (
		SELECT ROWNUM RN, A.* FROM (
		SELECT * FROM ${hotel}
		WHERE ${hotelName}
		LIKE
		#{keyword}
		ORDER BY ${hotelId} DESC
		) A
		) B
		WHERE RN BETWEEN #{start}
		AND #{end}
	</select>

	<!-- 전체 게시글 수 반환 -->
	<select id="total_count" resultType="Integer">
		SELECT COUNT(*) TOTAL_CNT
		FROM ${hotel}
	</select>
	
	<!-- 키워드 검색결과에 따른 게시글 수 반환 -->
	<select id="total_count_by_hotel_name" resultType="Integer">
		SELECT COUNT(*) TOTAL_CNT
		FROM ${hotel}
		WHERE ${hotelName} LIKE #{keyword}
	</select>
	
	<!-- 리뷰 등록, 삭제가 일어날 때 리뷰 개수와 평균 별점 수정하는 쿼리 -->
	<update id="update_review_cnt_and_hotel_review_star_avg">
		UPDATE ${hotel}
		SET ${reviewCnt} = ${reviewCnt} +
		#{amount},
		${hotelReviewAvg} = (
		SELECT AVG(${reviewStar})
		FROM ${review}
		WHERE ${hotelId} = #{hotelId}
		)
		WHERE ${hotelId} = #{hotelId}
	</update>

	<!-- 좋아요 등록, 삭제가 일어날때마다 호텔 테이블의 하트 개수 수정하는 쿼리 -->
	<update id="update_heart_cnt">
		UPDATE ${hotel}
		SET ${heartCnt} = ${heartCnt} +
		#{amount}
		WHERE ${hotelId} = #{hotelId}
	</update>

	<!-- 내가 찜한 호텔 목록 조회 -->
	<select id="select_by_heart" resultType="HotelVO">
		SELECT *
		FROM ${hotel} H
		WHERE H.${hotelId}
		IN (SELECT ${hotelId} 
			FROM ${heart}
			WHERE ${memberId} = #{memberId})
	</select>

</mapper>